<pre>
  NEP: <to be assigned>
  Title: Merkle State Proofs
  Author: Igor M. Coelho, Rodolfo Araujo, Vitor N. Coelho, et al (join us!)
  Type: Standard
  Status: Draft
  Created: 2018-11-14
</pre>

==Abstract==

Nodes in NEO network store Smart Contract information on a local Storage and past transactions on the blockchain itself.
This NEP intends to propose standard Merkle State Proofs regarding Storage values, voting, global asset balances and notifications, through the implementation of four different Merkle Patricia Trees.

==Motivation==

Nodes in NEO network store Smart Contract information on a local Storage and past transactions on the blockchain itself.
A client can prove it has a given amount of (global) assets by providing a list of (unspent) transactions, which can be validated on the blockchain, according to the UTXO model.
However, a client is not capable of providing evidence regarding information on the Storage space, what includes NEP-5 tokens.
Due to the lack of a global state hash, poor implemented nodes can disagree on Storage information, also lacking the capability to prove that its Storage is actually correct.

This problem can be easily solved by using Merkle Patricia Trees (MPT).
We propose the introduction of a Global MPT (GMPT), which deterministically maps scripthashes to Global State (GS) structures.
Each GS aggregates four different MPT root hashes: Storage MPT (SMPT), Votes MPT (VMPT), Notifications MPT (NMPT) and Assets MPT (AMPT).

If a client wants to provide evidence regarding Storage information, it can include the value information of a leaf node on SMPT, together with the hashes of nodes in the up-tree path to the SMPT root.
Any node can match this information to the GMPT root (possibly included in a block header), which guarantees that key-value mapping actually exists.
This process is enough to guarantee NEP-5 balances are correct, for any given block, even without access to the complete Storage information.

Votes associated to a scripthash are stored on VMPT. It maps the public keys of candidate consensus nodes to a fixed8 value (vote count).

Notifications associated to a scripthash are stored on NMPT. It maps a transaction hash to a list of notifications (of that scripthash).
This way, user can prove that a notification actually occurred on a given transaction.

UTXO model already guarantees that global assets are not double-spent on transactions, however no unified balance currently exists.
We propose that the asset balance on a specific scripthash is added to AMPT, which maps a global asset hash to a pair `(unspent, direct)` of fixed8 values, where `unspent` corresponds to unspent UTXO and `direct` corresponds to the scripthash direct balance of that asset.
It is worth mentioning that, initially, `direct` will be zero for all UTXO assets, and their total available on UTXO will be listed as the classic `unspent` value.

An extra byte can be included on transaction outputs to indicate if output is a classic UTXO unspent coin, or if it will be added to scripthash `direct` balance (no utxo).
The `direct` balance can also be used as input in a transaction, if it follows the standard: scripthash (20 bytes) + zero padding (12 bytes).
Since no repeated transaction hash is allowed, no double spending is possible. To allow deactivating old transactions, coin reference id (2 bytes) can be used to enforce transaction ordering on a block.
This feature allows a smooth transaction from a UTXO model to a model where global asset balance is aggregated, and any user and smart contract will be easily capable of sending assets and informing balances.
If asset is NEP-5 compliant, we can possibly include it here too, in order to get all benefits (consolidated balance, smart contract transfer)

Every scripthash which is deployed or holds assets should be included in GMPT. If scripthash is not deployed and holds no assets, it should be removed from GMPT.

==Specification==

Merkle Patricia Tree implementation can follow any standard, as long as it is deterministic and efficient.

==Rationale==

This proposal emerges from discussions with the community to enforce Storage correctness and the migration to an alternative model (different than UTXO).

==Backwards Compatibility==

This NEP is fully backwards compatible, unless GMPT root hash is added to block header (this would require a new block version).

==Test Cases==

Test cases for an implementation are mandatory for NEPs that are affecting consensus changes. Other NEPs can choose to include links to test cases if applicable.

TODO

==Implementation==

The implementations must be completed before any NEP is given status "Final", but it need not be completed before the NEP is accepted. It is better to finish the specification and rationale first and reach consensus on it before writing code.

Currently, storage changes of every block can be dumped following the use of this plugin: https://github.com/neo-project/neo-plugins/commit/db04e756a64c149e86d117fe89879c72f319c7df

We can use the same reasoning for an optional plugin that Persist the merkle tree states.
